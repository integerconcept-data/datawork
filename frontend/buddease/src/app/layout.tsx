import { Snapshot } from "@/app/components/snapshots/LocalStorageSnapshotStore";
import { fetchUserAreaDimensions } from '@/app/pages/layouts/fetchUserAreaDimensions';
import React from "react";
import { BaseData, Data } from "./components/models/data/Data";
import { EventManager } from "./components/projects/DataAnalysisPhase/DataProcessing/DataStore";
import { UnifiedMetaDataOptions } from "./configs/database/MetaDataOptions";

import { K, T } from "@/app/components/models/data/dataStoreMethods";
import { StructuredMetadata } from "@/app/configs/StructuredMetadata";
import { LanguageEnum } from "./components/communications/LanguageEnum";
import { version } from "./components/versions/Version";
import { createLastUpdatedWithVersion, createLatestVersion } from "./components/versions/createLatestVersion";
import { useMeta } from "./configs/useMeta";
import { useMetadata } from "./configs/useMetadata";
import { useSnapshot } from "./context/SnapshotContext";

const area = fetchUserAreaDimensions().toString()
const metadata: UnifiedMetaDataOptions<T, K<T>> = useMetadata<BaseData<any, any, StructuredMetadata<any, any>, Attachment>, any>(area);
const currentMeta: StructuredMetadata<T, K<T>> = useMeta<T, K<T>>(area)

const { snapshotMap } = useSnapshot<T, K<T>, StructuredMetadata<T, K<T>>, keyof T>();

const mappedSnapshot: Map<string, Snapshot<T, K<T>, StructuredMetadata<T, K<T>>, never>> = snapshotMap;

export const defaultMetadata = <
  T extends BaseData<any> = BaseData<any>,
  K extends T = T
>(): UnifiedMetaDataOptions<T, K, StructuredMetadata<T, K>> => ({
  title: 'Next.js',
  description: 'Generated by Next.js',
  projectId: 0,
  area: 'dashboard', 

  // Core structured metadata
  structuredMetadata: {
    version: version,
    lastUpdated: createLastUpdatedWithVersion(),
    latestVersion: createLatestVersion(),
    isActive: true,
    config: {},
   
    permissions: [],
    customFields: {},
    versionData: [],
  
    metadataEntries: {},
    id: "",
    apiEndpoint: "",
    apiKey: undefined,
    timeout: 0,
    retryAttempts: 0,
    name: "",
    category: "",
    timestamp: undefined,
    createdBy: "",
    tags: [],
    metadata: {
      area: "defaultArea",
      currentMeta: {
        metadataEntries: {},
        version: version,
        lastUpdated: createLastUpdatedWithVersion(),
        isActive: false,
        config: {},
        permissions: [],
        customFields: {},
        versionData: [],
        latestVersion: createLatestVersion(),
        id: "",
        apiEndpoint: "",
        apiKey: undefined,
        timeout: 0,
        retryAttempts: 0,
        name: "",
        category: "",
        timestamp: undefined,
        createdBy: "",
        tags: [],
        metadata: metadata,
        initialState: undefined,
        meta: currentMeta,
        events: {eventRecords: {}},
        mappedSnapshot: mappedSnapshot
      },
      metadataEntries: {}
    },
    initialState: undefined,
    meta: {} as StructuredMetadata<T, K>,
    mappedSnapshot: new Map<string, Snapshot<T, K>>(),
    events: {} as EventManager<T, K>,
  },

  // Optional overrides and related keys
  overrides: undefined, 
  relatedKeys: undefined,

  // Optional additional metadata
  videoMetadata: undefined,
  mediaMetadata: undefined,
  projectMetadata: undefined,
  taskMetadata: undefined,
  meetingMetadata: undefined,
  customMediaSession: undefined,

  // Project-related fields
  startDate: undefined,
  endDate: undefined,
  budget: 0,
  status: "",
  teamMembers: [],
  tasks: [],
  milestones: [],
  videos: [],

  // Duplicate fields removed
});



export default function RootLayout({ children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}






export const videoMetadataExample: UnifiedMetaDataOptions<
  BaseData<any>,
  BaseData<any>,
  StructuredMetadata<BaseData<any>>
> = {
  title: 'Next.js Video Metadata',
  description: 'Metadata with video details',
  projectId: 42,
  area: 'media',
  currentMeta: currentMeta,
  metadataEntries: {},
  structuredMetadata: {
    id: "123",
    name: "Video Data",
    category: "Video",
    apiEndpoint: "https://example.com/api",
    apiKey: undefined,
    description: 'Video metadata description',
    timeout: 0,
    retryAttempts: 0,
    timestamp: undefined,
    createdBy: "",
    tags: [],
    initialState: undefined,
    lastUpdated: createLastUpdatedWithVersion(),
    latestVersion: createLatestVersion(),
    isActive: true, 
    config:  {},
    version: version, 
    permissions: [], 
    customFields: [], 
    versionData: [], 
    meta: {} as StructuredMetadata<BaseData<any, any, StructuredMetadata<any, any>>, BaseData<any, any, StructuredMetadata<any, any>>>,
    events: {} as EventManager<BaseData<any>, BaseData<any>>,
    metadata: {
      area: area,
      currentMeta: currentMeta,
      metadataEntries: {}
    },
    metadataEntries: {
      'video-file-id': {
        originalPath: '/videos/sample.mp4',
        alternatePaths: ['/videos/alternate.mp4'],
        author: 'Video Creator',
        timestamp: new Date(),
        fileType: 'video',
        title: 'Sample Video',
        description: 'A sample video description.',
        keywords: ['video', 'sample', 'media'],
        authors: ['Video Creator'],
        contributors: ['Editor 1'],
        publisher: 'Video Publisher',
        copyright: '2024 Video Corp',
        license: 'CC-BY-4.0',
        links: ['https://example.com/video'],
        tags: ['example', 'video'],
      },
    },
    mappedSnapshot: mappedSnapshot, 
  },
  videoMetadata: {

    location: "",
    closedCaptions: [],
    license: "",
    
    isFamilyFriendly: false,
    isEmbeddable: false,
    isDownloadable: false,
    
    title: 'Sample Video',
    uploadDate: new Date(),
    url: 'https://example.com/video',
    categories: [],
    sizeInBytes: 1000000,
    uploader: "",
    format: 'MP4',
    views: 0,
    likes: 0,
    duration: 3600,
    resolution: '1080p',
    codec: 'H.264',
    isLicensedContent: false,
    bitrate: 5000000,
    frameRate: 30,
    aspectRatio: '16:9',
    data: {} as Data<BaseData<any, any, StructuredMetadata<any, any>>, BaseData<any, any, StructuredMetadata<any, any>>, StructuredMetadata<T, K<T>>>,
    colorSpace: 'sRGB',
    audioCodec: 'AAC',
    audioChannels: 2,
    audioSampleRate: 44100,
    language: LanguageEnum.English,
    subtitles: [],
    chapters: [],
    thumbnailUrl: 'https://example.com/thumbnail.jpg',
    metadataSource: 'manual',
    createdAt: new Date(),
    updatedAt: new Date(),
  },
};